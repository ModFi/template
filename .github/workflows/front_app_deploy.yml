name: Update Frontend From Release

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Environment where has to be deployed Qa / Prod'     
        required: true
        default: ''
      git-ref:
        description: Git Ref (Optional)    
        required: true
  release:
    types: [created]
    
env:
  REPOSITORY: "Docker-Images"

jobs:
  init:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.0.0
      with:
        ref: ${{ github.event.inputs.git-ref }}
                  
    - name: (GLOBAL) Debug
      run: |
        ls -la
        echo "${{github.ref}}"
        echo "${{ github.sha }}"
        echo "Opened: ${{github.event.pull_request.opened}}"
        echo "Assigned: ${{github.event.pull_request.assigned}}"
        echo "Review: ${{github.event.pull_request.ready_for_review}}"
        echo "Review_Requested: ${{github.event.pull_request.review_requested}}"
        echo "Release Body: ${{github.event.release.body}}"
                
    - name: (GLOBAL) Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
         
# Qa Assume role        
    - name: (QA) Assume role
      uses: aws-actions/configure-aws-credentials@v1
      if: contains(github.event.inputs.Environment, 'Qa')
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        role-to-assume: arn:aws:iam::${{ secrets.QA_AWS_ACCOUNT }}:role/Devops-Role
        role-duration-seconds: 3600
        role-session-name: GithubActions-Qa
       
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.7'
    - run: npm install
    - run: npm run build
    - run: ls -la dist/modfi-app  
      
    #- name: Yarn Install
      #run: |
        #yarn install
    #- name: Dev Build
      #run: |
        #yarn build
    #- name: Unit Tests
      #run: |
        #yarn test
    
    - name: Give permissions
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to')
      run: |
        chmod +x scripts/*.sh        
    
    - name: Disable Caching and Deploy to the failover s3 bucket
      if: contains(github.event.inputs.Environment, 'Qa')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Qa')
      run: ./scripts/before_cloudfront.sh
      
    - name: Running test
      if: contains(github.event.inputs.Environment, 'Qa')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Qa')
      run: |
        sleep 600     
    - name: After the tests enable Caching and replication
      if: contains(github.event.inputs.Environment, 'Qa') && failure()
      run: ./scripts/after_cloudfront.sh failure
      
    - name: After the tests enable Caching and Switch the Buckets on Origin Group
      if: contains(github.event.inputs.Environment, 'Qa')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Qa')
      run: ./scripts/after_cloudfront.sh success
      
# Prod Assume role        
    - name: (PROD) Assume role
      uses: aws-actions/configure-aws-credentials@v1
      if: contains(github.event.inputs.Environment, 'Prod')
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        role-to-assume: arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT }}:role/Devops-Role
        role-duration-seconds: 3600
        role-session-name: GithubActions-Prod
    
    - name: Disable Caching and Deploy to the failover s3 bucket
      if: contains(github.event.inputs.Environment, 'Prod')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Prod')
      run: ./scripts/before_cloudfront.sh
      
    - name: Running test
      if: contains(github.event.inputs.Environment, 'Prod')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Prod')
      run: |
        sleep 600     
    
    - name: After the tests enable Caching and replication
      if: contains(github.event.inputs.Environment, 'Prod') && failure()
      run: ./scripts/after_cloudfront.sh failure
      
    - name: After the tests enable Caching and Switch the Buckets on Origin Group
      if: contains(github.event.inputs.Environment, 'Prod')
      #if: github.event_name == 'release' && github.event.action == 'edited' && contains(github.event.release.body, 'Deploy-to-Prod')
      run: ./scripts/after_cloudfront.sh success

    - name: Slack Notification
      if: contains(github.event.inputs.Environment, 'Qa')
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: system_alerts_qa
        SLACK_COLOR: '#3278BD'
        SLACK_MESSAGE: '${{github.event.release.body}} Status: OK'
        SLACK_TITLE: Information
        SLACK_USERNAME: Github-CICD
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_QA }}

    - name: Slack Notification Prod
      if: contains(github.event.inputs.Environment, 'Prod')
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: system_alerts_prod
        SLACK_COLOR: '#3278BD'
        SLACK_MESSAGE: '${{github.event.release.body}} Status: OK'
        SLACK_TITLE: Information
        SLACK_USERNAME: Github-CICD
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PROD }}

